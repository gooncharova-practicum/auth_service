version: '3'

services:
  redis:
    image: redis/redis-stack
    container_name: redis
    env_file: .env
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    volumes:
      - cache:/data
    expose:
      - "${REDIS_PORT}"
    restart: on-failure

  postgres:
    image: postgres:15-alpine
    container_name: postgres_auth
    env_file: .env
    environment:
      POSTGRES_NAME: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - "${DB_PORT}"
    restart: on-failure

  nginx:
    image: nginx:1.23.1
    container_name: nginx
    environment:
      PORT: ${PORT}
      NGINX_PORT: ${NGINX_PORT}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - auth-service
    ports:
      - "${PORT}:${NGINX_PORT}"
    expose:
      - "${PORT}"
    restart: unless-stopped

  auth-service:
    build: ./auth
    container_name: auth-service
    env_file: .env
    depends_on:
      - postgres
      - redis
    restart: 'no'
    # on-failure

  jaeger:
    env_file: .env
    expose:
      - "${JAEGER_SERVICE_PORT}/udp"
      - "${JAEGER_EXTERNAL_PORT}"
    ports:
      - "${JAEGER_EXTERNAL_PORT}:${JAEGER_EXTERNAL_PORT}"
    image: 'jaegertracing/all-in-one:1.20.0'

  tests:
    build: ./tests/functional
    container_name: tests
    env_file: .env
    extends:
      service: auth-service
    depends_on:
      - auth-service
    volumes:
      - ./tests:/opt/app/tests
    entrypoint: [ "pytest", "src" ]
    restart: 'no'
  
  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    env_file: .env
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - "http.host=0.0.0.0"
      - "transport.host=127.0.0.1"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    expose:
      - "${ELASTIC_PORT}"
    restart: on-failure
  
  etl:
    build: ./etl/src
    container_name: etl
    env_file: .env
    depends_on:
      - elasticsearch
      - postgres
    volumes:
      - etl_logs:/usr/src/app/logs/
    entrypoint: [ "bash", "./entrypoint.sh" ]
    restart: on-failure
  
  backend:
    build: ./backend
    container_name: backend
    env_file:
      - .env
    depends_on:
      - redis
      - elasticsearch
    expose:
      - "${BACKEND_PORT}"
    entrypoint: [ "bash", "./entrypoint.sh" ]
    restart: on-failure

volumes:
  cache:
  postgres_data:
  tests:
  es_data:
  etl_logs:
