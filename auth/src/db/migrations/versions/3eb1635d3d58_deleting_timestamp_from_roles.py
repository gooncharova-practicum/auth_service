"""deleting timestamp from roles

Revision ID: 3eb1635d3d58
Revises: 25bb8aca5a0b
Create Date: 2023-04-14 12:32:48.093031

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3eb1635d3d58"
down_revision = "25bb8aca5a0b"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "login_history",
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("ip_address", postgresql.INET(), nullable=False),
        sa.Column("device_type", sa.String(), nullable=True),
        sa.Column("auth_datetime", sa.DateTime(), nullable=False),
        sa.Column("uid", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.uid"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("uid"),
        sa.UniqueConstraint("uid"),
        postgresql_partition_by="LIST (device_type)",
    )
    op.drop_table("user_history")
    op.create_unique_constraint(None, "roles", ["uid"])
    op.drop_column("roles", "updated_at")
    op.drop_column("roles", "created_at")
    op.create_unique_constraint(None, "user_role", ["uid"])
    # ### end Alembic commands ###

    op.execute(
        """
        CREATE TABLE IF NOT EXISTS "login_history_smart" PARTITION OF
                                    "login_history" FOR VALUES IN ('smart');
        CREATE TABLE IF NOT EXISTS "login_history_mobile" PARTITION OF
                                    "login_history" FOR VALUES IN ('mobile');
        CREATE TABLE IF NOT EXISTS "login_history_web" PARTITION OF
                                    "login_history" FOR VALUES IN ('web');
        CREATE TABLE IF NOT EXISTS "login_history_tablet" PARTITION OF
                                    "login_history" FOR VALUES IN ('tablet');
    """
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user_role", type_="unique")
    op.add_column(
        "roles",
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "roles",
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "roles", type_="unique")
    op.create_table(
        "user_history",
        sa.Column("user_agent", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("ip_address", postgresql.INET(), autoincrement=False, nullable=False),
        sa.Column("device_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("auth_datetime", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.uid"], name="user_history_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("uid", name="user_history_pkey"),
        sa.UniqueConstraint("uid", name="user_history_uid_key"),
    )
    op.execute(
        """
            DROP TABLE IF EXISTS "login_history_smart";
            DROP TABLE IF EXISTS "login_history_mobile";
            DROP TABLE IF EXISTS "login_history_web";
            DROP TABLE IF EXISTS "login_history_tablet";
    """
    )
    op.drop_table("login_history")
    # ### end Alembic commands ###
